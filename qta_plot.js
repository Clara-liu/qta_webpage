function qta(target_data, initial_data) {
    // detach from original object/variable
    var my_data = JSON.parse(JSON.stringify(target_data));
    var time_step = 0.005;
    var target_num = my_data.Height.length;
    var total_dur = my_data.Duration.reduce((a, b) => a + b, 0);
    // round to 3rd decimal place
    total_dur = total_dur.toFixed(3);
    total_dur = parseFloat(total_dur);
    var sample_num = Math.floor(total_dur / time_step);
    var target_idx = 0;
    var target_pos = 0.0;
    var t = 0.0;
    var f0_data = {
        Time: [],
        F0: [],
    };
    for (a = 0; a<target_num; a++) {
        my_data.Height[a] = my_data.Height[a] - my_data.Slope[a]*my_data.Duration[a];
    }
    // for now only implementing 3rd order
    // initial coefficients for first syl
    var lam = my_data.Lambda[target_idx];
    var height = my_data.Height[target_idx];
    var slope = my_data.Slope[target_idx];
    var start_pitch = initial_data.pitch_start;
    var order = initial_data.order

    var c0 = start_pitch - height;
    var c1 = c0 * lam - slope;

    // formulate coefficients for higher orders
    if (order > 2) {
        var ci = {};
        for (k=2; k<order; k++) {
            ci[k] = 0;
            for (i=0; i<2; i++) {
                ci[k] -= (math.factorial(k) / math.factorial(k - i)) * eval('c' + eval('i').toString()) * Math.pow(-lam, (k - i));
            }
            for (i=2; i<k; i++){
                ci[k] -= (math.factorial(k) / math.factorial(k - i)) * ci[i] * Math.pow(-lam, (k - i));
            }
            ci[k] = ci[k]/math.factorial(k)
        }
    }
    
    // for loop for each sample point to calculate f0_data
    for (i = 0; i < (sample_num+1); i++) {
        var t_s = i * time_step;
        t_s = t_s.toFixed(3);
        t_s = parseFloat(t_s);
        if ((t_s > target_pos + my_data.Duration[target_idx]+0.0001) && target_idx < target_num) {
            // calculate derivatives of previous syllable
            t = my_data.Duration[target_idx];
            let f0_pre = f0_data.F0[i - 1];
            let di = {};
            // when order greater than 15, use the automated method
            if (order>15) {
                for (d = 1; d < order; d++) {
                    if (d == 1) {
                        var func = '(' + slope.toString() + '*t+' + height.toString() + ')+(' + c0.toString() + '+' +
                            c1.toString() + '*t';
                        for (c = 2; c < order; c++) {
                            func += '+' + ci[c].toString() + '*(t^' + c.toString() + ')';
                        }
                        func += ')*math.exp(' + -lam.toString() + '*t)';

                        di[d] = math.derivative(func, 't');
                    } else {
                        di[d] = math.derivative(di[d - 1], 't');
                    }
                }
            }
            // if order smaller than 16, use Prom-on's hard coded derivatives for speed
            else if (order < 16){
                // calculate lam array using variable name in Prom-on's c code
                let r = {};
                for (p=1; p<15; p++){
                    r[p] = Math.pow(lam, p);
                }
                // calculate time array using variable name in Prom-on's c code
                let tx = {};
                for (p=1; p<15; p++){
                    tx[p] = Math.pow(t, p);
                }
                // declare coefficients using variable name in Prom-on's c code
                let c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0, c7 = 0, c8 = 0, c9 = 0, c10 = 0, c11 = 0, c12 = 0, c13 = 0, c14 = 0, c15 = 0;
                c1 = start_pitch - height;
                c2 = c1 * lam - slope;
                if (order>2){
                    c3 = ci[2];
                    if (order>3){
                        c4 = ci[3];
                        if (order>4){
                            c5 = ci[4];
                            if (order>5){
                                c6 = ci[5];
                                if (order>6){
                                    c7 = ci[6];
                                    if(order>7){
                                        c8 = ci[7];
                                        if (order>8){
                                            c9 = ci[8];
                                            if (order>9){
                                                c10 = ci[9];
                                                if (order>10){
                                                    c11 = ci[10];
                                                    if (order>11){
                                                        c12 = ci[11];
                                                        if (order>12){
                                                            c13 = ci[12];
                                                            if (order>13){
                                                                c14 = ci[13];
                                                                if (order>14){
                                                                    c15 = ci[14];
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                di[1] = slope+(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+
                    8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+
                    14*c15*tx[13])*Math.exp(-r[1]*tx[1])-(c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+
                    c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[1]*Math.exp(-r[1]*tx[1]);
                if (order>2){
                    di[2] = (2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+56*c9*tx[6]+72*c10*tx[7]+
                        90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+156*c14*tx[11]+182*c15*tx[12])*Math.exp(-r[1]*tx[1])-
                        2*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+
                        10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[1]*Math.exp(-r[1]*tx[1])+
                        (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+
                        c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[2]*Math.exp(-r[1]*tx[1]);
                    if (order>3){
                        di[3] = (6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*c11*tx[7]+
                            990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*c15*tx[11])*Math.exp(-r[1]*tx[1])-
                            3*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+56*c9*tx[6]+
                            72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+156*c14*tx[11]+
                            182*c15*tx[12])*r[1]*Math.exp(-r[1]*tx[1])+3*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+
                            6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+
                            13*c14*tx[12]+14*c15*tx[13])*r[2]*Math.exp(-r[1]*tx[1])-(c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+
                            c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*tx[11]+c13*tx[12]+c14*tx[13]+
                            c15*tx[14])*r[3]*Math.exp(-r[1]*tx[1]);
                        if (order>4){
                            di[4] = (24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+
                                5040*c11*tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+24024*c15*tx[10])*Math.exp(-r[1]*tx[1])-
                                4*(6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*tx[5]+504*c10*tx[6]+
                                720*c11*tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*c15*tx[11])*r[1]*Math.exp(-r[1]*tx[1])+
                                6*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+56*c9*tx[6]+72*c10*tx[7]+
                                90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[2]*Math.exp(-r[1]*tx[1])-
                                4*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+
                                10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[3]*Math.exp(-r[1]*tx[1])+
                                (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+
                                c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[4]*Math.exp(-r[1]*tx[1]);
                            if (order>5){
                                di[5] = (120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+15120*c10*tx[4]+30240*c11*tx[5]+
                                    55440*c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+240240*c15*tx[9])*Math.exp(-r[1]*tx[1])-
                                    5*(24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+
                                    5040*c11*tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+24024*c15*tx[10])*r[1]*
                                    Math.exp(-r[1]*tx[1])+10*(6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*
                                    tx[5]+504*c10*tx[6]+720*c11*tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+
                                    2184*c15*tx[11])*r[2]*Math.exp(-r[1]*tx[1])-10*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+
                                    30*c7*tx[4]+42*c8*tx[5]+56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*
                                    tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[3]*Math.exp(-r[1]*tx[1])+5*(c2+2*c3*tx[1]+3*c4*
                                    tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+
                                    11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[4]*Math.exp(-r[1]*tx[1])-
                                    (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+
                                    c11*tx[10]+c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[5]*Math.exp(-r[1]*tx[1]);
                                if (order>6){
                                    di[6] = (720*c7+5040*c8*tx[1]+20160*c9*tx[2]+60480*c10*tx[3]+151200*c11*tx[4]+332640*
                                        c12*tx[5]+665280*c13*tx[6]+1235520*c14*tx[7]+2162160*c15*tx[8])*Math.exp(-r[1]*tx[1])-
                                        6*(120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+15120*c10*tx[4]+30240*c11*tx[5]+
                                        55440*c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+240240*c15*tx[9])*r[1]*Math.exp(-r[1]*
                                        tx[1])+15*(24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+
                                        5040*c11*tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+24024*c15*tx[10])*r[2]*
                                        Math.exp(-r[1]*tx[1])-20*(6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*
                                        tx[5]+504*c10*tx[6]+720*c11*tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*
                                        c15*tx[11])*r[3]*Math.exp(-r[1]*tx[1])+15*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*
                                        tx[4]+42*c8*tx[5]+56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+
                                        156*c14*tx[11]+182*c15*tx[12])*r[4]*Math.exp(-r[1]*tx[1])-6*(c2+2*c3*tx[1]+3*c4*tx[2]+
                                        4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+
                                        11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[5]*Math.exp(-r[1]*tx[1])+
                                        (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*
                                        tx[9]+c11*tx[10]+c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[6]*Math.exp(-r[1]*tx[1]);
                                    if (order>7){
                                        di[7] = (5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+604800*c11*tx[3]+1663200*c12*tx[4]+
                                            3991680*c13*tx[5]+8648640*c14*tx[6]+17297280*c15*tx[7])*Math.exp(-r[1]*tx[1])-
                                            7*(720*c7+5040*c8*tx[1]+20160*c9*tx[2]+60480*c10*tx[3]+151200*c11*tx[4]+332640*
                                            c12*tx[5]+665280*c13*tx[6]+1235520*c14*tx[7]+2162160*c15*tx[8])*r[1]*Math.exp(-r[1]*
                                            tx[1])+21*(120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+15120*c10*tx[4]+
                                            30240*c11*tx[5]+55440*c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+240240*c15*
                                            tx[9])*r[2]*Math.exp(-r[1]*tx[1])-35*(24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+
                                            1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+
                                            17160*c14*tx[9]+24024*c15*tx[10])*r[3]*Math.exp(-r[1]*tx[1])+35*(6*c4+24*c5*tx[1]+
                                            60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*c11*tx[7]+
                                            990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*c15*tx[11])*r[4]*Math.exp(-r[1]*
                                            tx[1])-21*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+
                                            56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+156*c14*
                                            tx[11]+182*c15*tx[12])*r[5]*Math.exp(-r[1]*tx[1])+7*(c2+2*c3*tx[1]+3*c4*tx[2]+
                                            4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+
                                            11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[6]*Math.exp(-r[1]*tx[1])-
                                            (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+
                                            c10*tx[9]+c11*tx[10]+c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[7]*Math.exp(-r[1]*tx[1]);
                                        if (order>8){
                                            di[8] = (40320*c9+362880*c10*tx[1]+1814400*c11*tx[2]+6652800*c12*tx[3]+
                                                19958400*c13*tx[4]+51891840*c14*tx[5]+121080960*c15*tx[6])*Math.exp(-r[1]*
                                                tx[1])-8*(5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+604800*c11*tx[3]+
                                                1663200*c12*tx[4]+3991680*c13*tx[5]+8648640*c14*tx[6]+17297280*c15*
                                                tx[7])*r[1]*Math.exp(-r[1]*tx[1])+28*(720*c7+5040*c8*tx[1]+20160*c9*tx[2]+
                                                60480*c10*tx[3]+151200*c11*tx[4]+332640*c12*tx[5]+665280*c13*tx[6]+
                                                1235520*c14*tx[7]+2162160*c15*tx[8])*r[2]*Math.exp(-r[1]*tx[1])-56*
                                                (120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+15120*c10*tx[4]+
                                                30240*c11*tx[5]+55440*c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+
                                                240240*c15*tx[9])*r[3]*Math.exp(-r[1]*tx[1])+70*(24*c5+120*c6*tx[1]+
                                                360*c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*tx[6]+
                                                7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+24024*c15*tx[10])*r[4]*
                                                Math.exp(-r[1]*tx[1])-56*(6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*
                                                tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*c11*tx[7]+990*c12*tx[8]+1320*c13*
                                                tx[9]+1716*c14*tx[10]+2184*c15*tx[11])*r[5]*Math.exp(-r[1]*tx[1])+28*
                                                (2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+
                                                56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+
                                                156*c14*tx[11]+182*c15*tx[12])*r[6]*Math.exp(-r[1]*tx[1])-8*(c2+2*c3*tx[1]+
                                                3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+
                                                9*c10*tx[8]+10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+
                                                14*c15*tx[13])*r[7]*Math.exp(-r[1]*tx[1])+(c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+
                                                c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+
                                                c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[8]*Math.exp(-r[1]*tx[1]);
                                            if(order>9){
                                                di[9] = (362880*c10+3628800*c11*tx[1]+19958400*c12*tx[2]+79833600*c13*
                                                    tx[3]+259459200*c14*tx[4]+726485760*c15*tx[5])*Math.exp(-r[1]*tx[1])-
                                                    9*(40320*c9+362880*c10*tx[1]+1814400*c11*tx[2]+6652800*c12*tx[3]+
                                                    19958400*c13*tx[4]+51891840*c14*tx[5]+121080960*c15*tx[6])*r[1]*
                                                    Math.exp(-r[1]*tx[1])+36*(5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+604800*
                                                    c11*tx[3]+1663200*c12*tx[4]+3991680*c13*tx[5]+8648640*c14*tx[6]+
                                                    17297280*c15*tx[7])*r[2]*Math.exp(-r[1]*tx[1])-84*(720*c7+5040*c8*tx[1]+
                                                    20160*c9*tx[2]+60480*c10*tx[3]+151200*c11*tx[4]+332640*c12*tx[5]+
                                                    665280*c13*tx[6]+1235520*c14*tx[7]+2162160*c15*tx[8])*r[3]*
                                                    Math.exp(-r[1]*tx[1])+126*(120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*
                                                    tx[3]+15120*c10*tx[4]+30240*c11*tx[5]+55440*c12*tx[6]+95040*c13*
                                                    tx[7]+154440*c14*tx[8]+240240*c15*tx[9])*r[4]*Math.exp(-r[1]*tx[1])-
                                                    126*(24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+
                                                    3024*c10*tx[5]+5040*c11*tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+
                                                    17160*c14*tx[9]+24024*c15*tx[10])*r[5]*Math.exp(-r[1]*tx[1])+84*
                                                    (6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+
                                                    336*c9*tx[5]+504*c10*tx[6]+720*c11*tx[7]+990*c12*tx[8]+1320*
                                                    c13*tx[9]+1716*c14*tx[10]+2184*c15*tx[11])*r[6]*Math.exp(-r[1]*tx[1])-
                                                    36*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+
                                                    56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*tx[10]+
                                                    156*c14*tx[11]+182*c15*tx[12])*r[7]*Math.exp(-r[1]*tx[1])+9*(c2+2*c3*tx[1]+
                                                    3*c4*tx[2]+4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+
                                                    9*c10*tx[8]+10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+
                                                    14*c15*tx[13])*r[8]*Math.exp(-r[1]*tx[1])-(c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+
                                                    c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+
                                                    c12*tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[9]*Math.exp(-r[1]*tx[1]);
                                                if (order>10){
                                                    di[10] = (3628800.*c11+39916800.*c12*tx[1]+239500800.*c13*tx[2]+
                                                        1037836800.*c14*tx[3]+3632428800.*c15*tx[4])*Math.exp(-r[1]*tx[1])-
                                                        10*(362880.*c10+3628800.*c11*tx[1]+19958400.*c12*tx[2]+
                                                        79833600.*c13*tx[3]+259459200.*c14*tx[4]+726485760.*c15*tx[5])*
                                                        r[1]*Math.exp(-r[1]*tx[1])+45*(40320.*c9+362880.*c10*tx[1]+
                                                        1814400.*c11*tx[2]+6652800.*c12*tx[3]+19958400.*c13*tx[4]+
                                                        51891840.*c14*tx[5]+121080960.*c15*tx[6])*r[2]*Math.exp(-r[1]*
                                                        tx[1])-120*(5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+604800*
                                                        c11*tx[3]+1663200.*c12*tx[4]+3991680.*c13*tx[5]+8648640*
                                                        c14*tx[6]+17297280*c15*tx[7])*r[3]*Math.exp(-r[1]*tx[1])+210*
                                                        (720*c7+5040*c8*tx[1]+20160*c9*tx[2]+60480*c10*tx[3]+151200*
                                                        c11*tx[4]+332640*c12*tx[5]+665280*c13*tx[6]+1235520*c14*tx[7]+
                                                        2162160*c15*tx[8])*r[4]*Math.exp(-r[1]*tx[1])-252*(120*c6+720*c7*
                                                        tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+15120*c10*tx[4]+30240*c11*
                                                        tx[5]+55440*c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+240240*
                                                        c15*tx[9])*r[5]*Math.exp(-r[1]*tx[1])+210*(24*c5+120*c6*tx[1]+360*
                                                        c7*tx[2]+840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*
                                                        tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+24024*
                                                        c15*tx[10])*r[6]*Math.exp(-r[1]*tx[1])-120*(6*c4+24*c5*tx[1]+
                                                        60*c6*tx[2]+120*c7*tx[3]+210*c8*tx[4]+336*c9*tx[5]+504*
                                                        c10*tx[6]+720*c11*tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*
                                                        c14*tx[10]+2184*c15*tx[11])*r[7]*Math.exp(-r[1]*tx[1])+45*
                                                        (2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+
                                                        42*c8*tx[5]+56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*
                                                        c12*tx[9]+132*c13*tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[8]*
                                                        Math.exp(-r[1]*tx[1])-10*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+5*c6*
                                                        tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+
                                                        11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*tx[13])*r[9]*
                                                        Math.exp(-r[1]*tx[1])+(c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*
                                                        tx[5]+c7*tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*
                                                        tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*r[10]*Math.exp(-r[1]*tx[1]);
                                                    if (order>11){
                                                        di[11] = (39916800.*c12+479001600.*c13*tx[1]+3113510400.*c14*
                                                            tx[2]+14529715200.*c15*tx[3])*Math.exp(-r[1]*tx[1])-11*(3628800.*
                                                            c11+39916800.*c12*tx[1]+239500800.*c13*tx[2]+1037836800.*
                                                            c14*tx[3]+3632428800.*c15*tx[4])*r[1]*Math.exp(-r[1]*tx[1])+55*
                                                            (362880*c10+3628800*c11*tx[1]+19958400.*c12*tx[2]+79833600.*
                                                            c13*tx[3]+259459200.*c14*tx[4]+726485760.*c15*tx[5])*r[2]*
                                                            Math.exp(-r[1]*tx[1])-165*(40320*c9+362880*c10*tx[1]+1814400*
                                                            c11*tx[2]+6652800*c12*tx[3]+19958400.*c13*tx[4]+51891840.*
                                                            c14*tx[5]+121080960.*c15*tx[6])*r[3]*Math.exp(-r[1]*tx[1])+330*
                                                            (5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+604800*c11*tx[3]+
                                                            1663200*c12*tx[4]+3991680*c13*tx[5]+8648640.*c14*tx[6]+
                                                            17297280.*c15*tx[7])*r[4]*Math.exp(-r[1]*tx[1])-462*
                                                            (720*c7+5040*c8*tx[1]+20160*c9*tx[2]+60480*c10*tx[3]+
                                                            151200*c11*tx[4]+332640*c12*tx[5]+665280*c13*tx[6]+
                                                            1235520*c14*tx[7]+2162160.*c15*tx[8])*r[5]*Math.exp(-r[1]*
                                                            tx[1])+462*(120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+
                                                            15120*c10*tx[4]+30240*c11*tx[5]+55440*c12*tx[6]+95040*c13*
                                                            tx[7]+154440*c14*tx[8]+240240*c15*tx[9])*r[6]*Math.exp(-r[1]*
                                                            tx[1])-330*(24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+
                                                            1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*tx[6]+7920*c12*tx[7]+
                                                            11880*c13*tx[8]+17160*c14*tx[9]+24024*c15*tx[10])*r[7]*
                                                            Math.exp(-r[1]*tx[1])+165*(6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*
                                                            tx[3]+210*c8*tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*c11*
                                                            tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*
                                                            c15*tx[11])*r[8]*Math.exp(-r[1]*tx[1])-55*(2*c3+6*c4*tx[1]+
                                                            12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+56*c9*
                                                            tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*
                                                            tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[9]*
                                                            Math.exp(-r[1]*tx[1])+11*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*tx[3]+
                                                            5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+9*c10*tx[8]+
                                                            10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+13*c14*tx[12]+
                                                            14*c15*tx[13])*r[10]*Math.exp(-r[1]*tx[1])-(c1+c2*tx[1]+
                                                            c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+c8*tx[7]+
                                                            c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*tx[11]+c13*tx[12]+
                                                            c14*tx[13]+c15*tx[14])*r[11]*Math.exp(-r[1]*tx[1]);
                                                        if (order>12){
                                                            di[12] = (479001600.*c13+6227020800.*c14*tx[1]+43589145600.*
                                                                c15*tx[2])*Math.exp(-r[1]*tx[1])-12*(39916800.*c12+479001600.*
                                                                c13*tx[1]+3113510400.*c14*tx[2]+14529715200.*c15*tx[3])*
                                                                r[1]*Math.exp(-r[1]*tx[1])+66*(3628800.*c11+39916800.*c12*
                                                                tx[1]+239500800.*c13*tx[2]+1037836800.*c14*tx[3]+
                                                                3632428800.*c15*tx[4])*r[2]*Math.exp(-r[1]*tx[1])-220*
                                                                (362880.*c10+3628800.*c11*tx[1]+19958400.*c12*tx[2]+
                                                                79833600.*c13*tx[3]+259459200.*c14*tx[4]+726485760.*
                                                                c15*tx[5])*r[3]*Math.exp(-r[1]*tx[1])+495*(40320.*c9+362880.*
                                                                c10*tx[1]+1814400.*c11*tx[2]+6652800.*c12*tx[3]+
                                                                19958400.*c13*tx[4]+51891840*c14*tx[5]+121080960*
                                                                c15*tx[6])*r[4]*Math.exp(-r[1]*tx[1])-792*(5040*c8+40320*
                                                                c9*tx[1]+181440*c10*tx[2]+604800*c11*tx[3]+1663200*
                                                                c12*tx[4]+3991680*c13*tx[5]+8648640*c14*tx[6]+17297280*
                                                                c15*tx[7])*r[5]*Math.exp(-r[1]*tx[1])+924*(720*c7+5040*
                                                                c8*tx[1]+20160*c9*tx[2]+60480*c10*tx[3]+151200*c11*
                                                                tx[4]+332640*c12*tx[5]+665280*c13*tx[6]+1235520*
                                                                c14*tx[7]+2162160*c15*tx[8])*r[6]*Math.exp(-r[1]*tx[1])-
                                                                792*(120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*tx[3]+
                                                                15120*c10*tx[4]+30240*c11*tx[5]+55440*c12*tx[6]+95040*
                                                                c13*tx[7]+154440*c14*tx[8]+240240*c15*tx[9])*r[7]*
                                                                Math.exp(-r[1]*tx[1])+495*(24*c5+120*c6*tx[1]+360*c7*tx[2]+
                                                                840*c8*tx[3]+1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*
                                                                tx[6]+7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+
                                                                24024*c15*tx[10])*r[8]*Math.exp(-r[1]*tx[1])-220*
                                                                (6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+210*c8*
                                                                tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*c11*tx[7]+
                                                                990*c12*tx[8]+1320*c13*tx[9]+1716*c14*tx[10]+2184*
                                                                c15*tx[11])*r[9]*Math.exp(-r[1]*tx[1])+66*(2*c3+6*c4*tx[1]+
                                                                12*c5*tx[2]+20*c6*tx[3]+30*c7*tx[4]+42*c8*tx[5]+
                                                                56*c9*tx[6]+72*c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+
                                                                132*c13*tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[10]*
                                                                Math.exp(-r[1]*tx[1])-12*(c2+2*c3*tx[1]+3*c4*tx[2]+4*c5*
                                                                tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+8*c9*tx[7]+
                                                                9*c10*tx[8]+10*c11*tx[9]+11*c12*tx[10]+12*c13*tx[11]+
                                                                13*c14*tx[12]+14*c15*tx[13])*r[11]*Math.exp(-r[1]*tx[1])+
                                                                (c1+c2*tx[1]+c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*
                                                                tx[6]+c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*tx[11]+
                                                                c13*tx[12]+c14*tx[13]+c15*tx[14])*r[12]*Math.exp(-r[1]*tx[1]);
                                                            if (order>13){
                                                                di[13] = (6227020800.*c14 + 87178291200.*c15*tx[1])/Math.exp(r[1]*
                                                                    tx[1]) + (286.*r[10]*(2184.*c15*tx[11] + 1716.*c14*tx[10]+
                                                                    1320.*c13*tx[9] + 990.*c12*tx[8] + 720.*c11*tx[7]+
                                                                    504.*c10*tx[6] + 336.*c9*tx[5] + 210.*c8*tx[4]+
                                                                    120.*c7*tx[3] + 60.*c6*tx[2] + 24.*c5*tx[1] + 6.*
                                                                    c4))/Math.exp(r[1]*tx[1]) - (286.*r[3]*(3632428800.*
                                                                    c15*tx[4]+1037836800.*c14*tx[3] + 239500800.*c13*
                                                                    tx[2] + 39916800.*c12*tx[1] + 3628800.*c11))/Math.exp(r[1]*
                                                                    tx[1]) - (13.*r[1]*(43589145600.*c15*tx[2]+
                                                                    6227020800.*c14*tx[1] + 479001600.*c13))/Math.exp(r[1]*
                                                                    tx[1]) - (1287.*r[5]*(121080960.*c15*tx[6]+
                                                                    51891840.*c14*tx[5] + 19958400.*c13*tx[4]+
                                                                    6652800.*c12*tx[3] + 1814400.*c11*tx[2]+362880.*
                                                                    c10*tx[1] + 40320.*c9))/Math.exp(r[1]*tx[1]) - (1716.*
                                                                    r[7]*(2162160.*c15*tx[8] + 1235520.*c14*tx[7] + 665280.*
                                                                    c13*tx[6] + 332640.*c12*tx[5] + 151200.*c11*tx[4]+
                                                                    60480.*c10*tx[3] + 20160.*c9*tx[2] + 5040.*c8*tx[1]+
                                                                    720.*c7))/Math.exp(r[1]*tx[1]) - (r[13]*(c15*tx[14] + c14*
                                                                    tx[13] + c13*tx[12] + c12*tx[11] + c11*tx[10] + c10*
                                                                    tx[9] + c9*tx[8] + c8*tx[7] + c7*tx[6] + c6*
                                                                    tx[5] + c5*tx[4] + c4*tx[3] + c3*tx[2] + c2*tx[1] +
                                                                    c1))/Math.exp(r[1]*tx[1]) - (715*r[9]*(24024*c15*tx[10] +
                                                                    17160*c14*tx[9] + 11880*c13*tx[8] + 7920*c12*tx[7] +
                                                                    5040*c11*tx[6] + 3024*c10*tx[5] + 1680*c9*tx[4] +
                                                                    840*c8*tx[3] + 360*c7*tx[2] + 120*c6*tx[1] +
                                                                    24*c5))/Math.exp(r[1]*tx[1]) + (78*r[2]*(14529715200.*
                                                                    c15*tx[3] + 3113510400.*c14*tx[2] + 479001600.*
                                                                    c13*tx[1] + 39916800.*c12))/Math.exp(r[1]*tx[1]) -
                                                                    (78*r[11]*(182*c15*tx[12] + 156*c14*tx[11] +
                                                                    132*c13*tx[10] + 110*c12*tx[9] + 90*c11*tx[8] +
                                                                    72*c10*tx[7] + 56*c9*tx[6] + 42*c8*tx[5] +
                                                                    30*c7*tx[4] + 20*c6*tx[3] + 12*c5*tx[2] +
                                                                    6*c4*tx[1] + 2*c3))/Math.exp(r[1]*tx[1]) + (1716*r[6]*
                                                                    (17297280.*c15*tx[7] + 8648640.*c14*tx[6] +
                                                                    3991680.*c13*tx[5] + 1663200.*c12*tx[4] + 604800.*
                                                                    c11*tx[3] + 181440.*c10*tx[2] + 40320.*c9*tx[1] +
                                                                    5040*c8))/Math.exp(r[1]*tx[1]) + (715*r[4]*
                                                                    (726485760.*c15*tx[5] + 259459200.*c14*tx[4] +
                                                                    79833600.*c13*tx[3] + 19958400.*c12*tx[2] +
                                                                    3628800.*c11*tx[1] + 362880.*c10))/Math.exp(r[1]*
                                                                    tx[1]) + (13*r[12]*(14*c15*tx[13] + 13*c14*tx[12]+
                                                                    12*c13*tx[11] + 11*c12*tx[10] + 10*c11*tx[9] +
                                                                    9*c10*tx[8] + 8*c9*tx[7] + 7*c8*tx[6] + 6*c7*tx[5]+
                                                                    5*c6*tx[4] + 4*c5*tx[3] + 3*c4*tx[2] + 2*c3*tx[1]+
                                                                    c2))/Math.exp(r[1]*tx[1]) + (1287*r[8]*(240240.*c15*tx[9]+
                                                                    154440.*c14*tx[8] + 95040.*c13*tx[7] + 55440.*c12*tx[6]+
                                                                    30240.*c11*tx[5] + 15120.*c10*tx[4] + 6720.*c9*tx[3]+
                                                                    2520.*c8*tx[2] + 720.*c7*tx[1] + 120*c6))/Math.exp(r[1]*tx[1]);
                                                                if (order>14){
                                                                    di[14] = -14*(6227020800.*c14+87178291200.*c15*t)*
                                                                        r[1]*Math.exp(-r[1]*tx[1])+91*(479001600.*c13+
                                                                        6227020800.*c14*tx[1]+43589145600.*c15*tx[2])*
                                                                        r[2]*Math.exp(-r[1]*tx[1])-364*(39916800.*c12+
                                                                        479001600.*c13*tx[1]+3113510400.*c14*tx[2]+
                                                                        14529715200.*c15*tx[3])*r[3]*Math.exp(-r[1]*tx[1])+
                                                                        1001*(3628800.*c11+39916800.*c12*tx[1]+
                                                                        239500800.*c13*tx[2]+1037836800.*c14*tx[3]+
                                                                        3632428800.*c15*tx[4])*r[4]*Math.exp(-r[1]*tx[1])-
                                                                        2002*(362880*c10+3628800.*c11*tx[1]+19958400.*
                                                                        c12*tx[2]+79833600.*c13*tx[3]+259459200.*
                                                                        c14*tx[4]+726485760.*c15*tx[5])*r[5]*
                                                                        Math.exp(-r[1]*tx[1])+3003*(40320*c9+362880*c10*
                                                                        tx[1]+1814400*c11*tx[2]+6652800.*c12*tx[3]+
                                                                        19958400.*c13*tx[4]+51891840.*c14*tx[5]+
                                                                        121080960.*c15*tx[6])*r[6]*Math.exp(-r[1]*tx[1])-
                                                                        3432*(5040*c8+40320*c9*tx[1]+181440*c10*tx[2]+
                                                                        604800*c11*tx[3]+1663200*c12*tx[4]+3991680.*
                                                                        c13*tx[5]+8648640.*c14*tx[6]+17297280.*c15*
                                                                        tx[7])*r[7]*Math.exp(-r[1]*tx[1])+3003*
                                                                        (720*c7+5040*c8*tx[1]+20160*c9*tx[2]+60480*
                                                                        c10*tx[3]+151200*c11*tx[4]+332640*c12*tx[5]+
                                                                        665280*c13*tx[6]+1235520*c14*tx[7]+2162160*
                                                                        c15*tx[8])*r[8]*Math.exp(-r[1]*tx[1])-2002*
                                                                        (120*c6+720*c7*tx[1]+2520*c8*tx[2]+6720*c9*
                                                                        tx[3]+15120*c10*tx[4]+30240*c11*tx[5]+55440*
                                                                        c12*tx[6]+95040*c13*tx[7]+154440*c14*tx[8]+
                                                                        240240*c15*tx[9])*r[9]*Math.exp(-r[1]*tx[1])+1001*
                                                                        (24*c5+120*c6*tx[1]+360*c7*tx[2]+840*c8*tx[3]+
                                                                        1680*c9*tx[4]+3024*c10*tx[5]+5040*c11*tx[6]+
                                                                        7920*c12*tx[7]+11880*c13*tx[8]+17160*c14*tx[9]+
                                                                        24024*c15*tx[10])*r[10]*Math.exp(-r[1]*tx[1])+
                                                                        87178291200.*c15*Math.exp(-r[1]*tx[1])-364*
                                                                        (6*c4+24*c5*tx[1]+60*c6*tx[2]+120*c7*tx[3]+
                                                                        210*c8*tx[4]+336*c9*tx[5]+504*c10*tx[6]+720*
                                                                        c11*tx[7]+990*c12*tx[8]+1320*c13*tx[9]+1716*
                                                                        c14*tx[10]+2184*c15*tx[11])*r[11]*Math.exp(-r[1]*
                                                                        tx[1])+91*(2*c3+6*c4*tx[1]+12*c5*tx[2]+20*c6*
                                                                        tx[3]+30*c7*tx[4]+42*c8*tx[5]+56*c9*tx[6]+72*
                                                                        c10*tx[7]+90*c11*tx[8]+110*c12*tx[9]+132*c13*
                                                                        tx[10]+156*c14*tx[11]+182*c15*tx[12])*r[12]*
                                                                        Math.exp(-r[1]*tx[1])-14*(c2+2*c3*tx[1]+3*c4*tx[2]+
                                                                        4*c5*tx[3]+5*c6*tx[4]+6*c7*tx[5]+7*c8*tx[6]+
                                                                        8*c9*tx[7]+9*c10*tx[8]+10*c11*tx[9]+11*c12*
                                                                        tx[10]+12*c13*tx[11]+13*c14*tx[12]+14*c15*
                                                                        tx[13])*r[13]*Math.exp(-r[1]*tx[1])+(c1+c2*tx[1]+
                                                                        c3*tx[2]+c4*tx[3]+c5*tx[4]+c6*tx[5]+c7*tx[6]+
                                                                        c8*tx[7]+c9*tx[8]+c10*tx[9]+c11*tx[10]+c12*
                                                                        tx[11]+c13*tx[12]+c14*tx[13]+c15*tx[14])*
                                                                        r[14]*Math.exp(-r[1]*tx[1]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
            // go to the next syllable
            target_pos = target_pos + my_data.Duration[target_idx];
            target_pos = target_pos.toFixed(3);
            target_pos = parseFloat(target_pos);
            target_idx++;
            // calculate coefficients for the next target based on derivatives above
            lam = my_data.Lambda[target_idx];
            height = my_data.Height[target_idx];
            slope = my_data.Slope[target_idx];

            c0 = f0_pre - height;
            if (order>15) {
                c1 = di[1].evaluate({t: t}) + c0 * lam - slope;
            }
            else{
                c1 = di[1] + c0 * lam - slope;
            }
            if (order > 2) {
                ci = {};
                for (k=2; k<order; k++) {
                    if (order>15) {
                        ci[k] = di[k].evaluate({t: eval(t)});
                    }
                    else{
                        ci[k] = di[k];
                    }
                    for (iii=0; iii<2; iii++) {
                        ci[k] -= (math.factorial(k) / math.factorial(k - iii)) *
                            eval('c' + eval('iii').toString()) * Math.pow(-lam, (k - iii));
                    }
                    for (iii=2; iii<k; iii++){
                        ci[k] -= (math.factorial(k) / math.factorial(k - iii)) * ci[iii] * Math.pow(-lam, (k - iii));
                    }
                    ci[k] = ci[k]/math.factorial(k)
                }
            }
        }
        // calculate current f0
        t = t_s - target_pos;
        t = t.toFixed(3);
        t = parseFloat(t);
        f0_data.Time.push(t_s);
        if (order == 2) {
            var f0 = (slope * t + height) +
                (c0 + c1 * t) * Math.exp(-lam * t);
        }
        else {
            var xt = slope * t + height;
            var second_term = c0 + c1 * t;
            for (ii=2; ii<order; ii++){
                second_term += ci[ii] * Math.pow(t, ii);
            }
            second_term = second_term * Math.exp(-lam * t);
            var f0 = xt + second_term;
        }
        f0_data.F0.push(f0);
    }
    // extra data needed for plotting
    var plot_decor = {
        Y_range: initial_data.bounds,
        X_range: [0, total_dur],
        Syl_mark: [],
        Duration: my_data.Duration,
        m: my_data.Slope,
        b: []
    };
    my_data.Duration.reduce(function(a,b,i = 0) { return plot_decor.Syl_mark[i] = a+b; },0);
    for (i=0; i<my_data.Height.length; i++){
        if (my_data.Slope[i] == 0){
            plot_decor.b[i] = my_data.Height[i];
        }
        else{
            plot_decor.b[i] = target_data.Height[i] - plot_decor.Syl_mark[i]*my_data.Slope[i];
        }
    }
    plot(f0_data, plot_decor);
}